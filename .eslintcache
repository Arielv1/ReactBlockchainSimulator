[{"D:\\Homework\\Y4S1\\Blockchain\\HW1\\Afeka\\blockchaingui\\src\\App.js":"1","D:\\Homework\\Y4S1\\Blockchain\\HW1\\Afeka\\blockchaingui\\src\\reportWebVitals.js":"2","D:\\Homework\\Y4S1\\Blockchain\\HW1\\Afeka\\blockchaingui\\src\\index.js":"3","D:\\Homework\\Y4S1\\Blockchain\\HW1\\Afeka\\blockchaingui\\src\\BlockChain.js":"4","D:\\Homework\\Y4S1\\Blockchain\\HW1\\Afeka\\blockchaingui\\src\\Components\\Client.js":"5"},{"size":4471,"mtime":1607522691225,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":6571,"mtime":1607504131255,"results":"10","hashOfConfig":"7"},{"size":2154,"mtime":1607522252933,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1wsssyv",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Homework\\Y4S1\\Blockchain\\HW1\\Afeka\\blockchaingui\\src\\App.js",["24","25","26","27","28","29","30"],"import './App.css';\nimport Client from './Components/Client'\nimport React, { Component, useState } from 'react';\nimport {CardGroup } from 'react-bootstrap'\nimport { Button, Card, Form, CardDeck } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nconst { Blockchain, Transaction } = require(\"./BlockChain\");\nconst fs = require('fs')\nvar text = ''\nclass App extends React.Component {\n \n  constructor(props){\n    super(props)\n    this.state = {\n      blockchainView : '',\n      difficulty: 1,\n      blockchain: null\n    }\n    this.setDifficulty = this.setDifficulty.bind(this)\n    this.addTransaction = this.addTransaction.bind(this)\n    this.initBlockchain = this.initBlockchain.bind(this)\n    this.getBalance = this.getBalance.bind(this) \n  }\n\n  setDifficulty = (event) => {\n    this.setState({[event.target.name] : event.target.value})\n  }\n\n  initBlockchain = () => {\n    this.state.blockchain = new Blockchain()\n    this.state.blockchain.difficulty = parseInt(this.state.difficulty, 10)\n    console.log(this.state.blockchain)\n  }\n\n  mine = () => {\n    if (!this.state.blockchain) {\n      alert('Blockchain Full Node Not Yet Defined')\n      return \n    }\n    console.log(this.state.blockchain)\n    this.state.blockchain.miningPendingTransaction()\n    alert('Block mined successfully')\n  }\n\n  printBlockchain = () => {\n    const allBlocks = []\n\n    if (!this.state.blockchain || (this.state.blockchain.chain.length === 1 && this.state.blockchain.pendingTransaction.length === 0)){\n       allBlocks.push(<Card>\n        <body>\n          Block #1 Has 0 Transactions\n          </body>\n        </Card>)\n    }\n    else {\n      for (let i = 0; i<this.state.blockchain.chain.length; i++) {\n        if(i > 0) {\n          allBlocks.push(<h6>{'-->'}</h6>)\n        }\n        this.state.blockchain.chain[i].genMerkleTree()\n        const merkleRoot = this.state.blockchain.chain[i].root\n        allBlocks.push(<Card>\n          <body>\n            Block #{i+1} Has {this.state.blockchain.chain[i].transactions.length} Transactions\n            </body>\n            Merkle Root {JSON.stringify(merkleRoot.toString())}\n          </Card>)\n      }\n    }\n\n    \n    this.setState({blockchainView: allBlocks})\n  }\n\n  addTransaction (tx) {\n    if (!this.state.blockchain) {\n      alert('Blockchain Full Node Not Yet Defined')\n      return \n    }\n    var jsonTx = JSON.parse(tx)\n    var ctx = new Transaction(jsonTx.fromAddress, jsonTx.toAddress, parseInt(jsonTx.amount,10))\n    ctx.signature = jsonTx.signature\n    ctx.timestamp = jsonTx.timestamp\n    console.log(ctx);\n    this.state.blockchain.addTransaction(ctx)\n  }\n\n  getBalance(address) {\n    if (!this.state.blockchain) {\n      alert('Blockchain Full Node Not Yet Defined')\n      return \n    }\n    return this.state.blockchain.getBalanceOfAddress(address)\n  }\n\n  render() {\n    return (\n      \n      <div>\n        <br></br>\n        <div style={{ marginLeft: '1rem', marginRight :'2rem'}}>\n          Set number of leading zeroes for mining:\n          <input style={{ marginLeft: '1rem', marginRight :'2rem'}} \n                  type=\"text\"\n                  name=\"difficulty\" \n                  placeholder=\"1\" \n                  value = {this.state.difficulty} \n                  onChange={this.setDifficulty}>\n                  </input>\n          <Button onClick={() => this.initBlockchain()}>Create Blockchain</Button>\n          <br></br>\n          Note: Changing difficulty resets the blockchain entity, all previous transactions will be discarded\n        </div>\n        <hr></hr>\n        \n        <CardGroup>\n          <Client me=\"Alice\" transfer={this.addTransaction} balance={this.getBalance} private=\"be4fd198c8b81d22cd90eb06ca708527ea5e84f75ea852545f60467f128665ad\"/>\n          <Client me=\"Bob\" transfer={this.addTransaction} balance={this.getBalance} private=\"35d5d301c684e580dbe3a50a3cbf193580a5500ab679a854af58aad02d2108cf\"/>\n          <Client me=\"Claire\" transfer={this.addTransaction} balance={this.getBalance} private=\"c62ec918cd0c643eabcb127e20a31ad9b87a3b87fed444fdbf485a84a2886699\"/>\n        </CardGroup>\n        <div style={{ marginLeft: '1rem', marginRight :'2rem'}}>\n           <hr></hr>\n          <Button onClick={() => this.mine()}>Mine</Button>\n          <hr></hr>\n          <Button onClick={() => this.printBlockchain()}>View Blockchain</Button>\n          <hr></hr>\n          <CardDeck >{this.state.blockchainView}</CardDeck>\n        </div>\n\n       \n      </div>\n  );\n  }\n  \n}\n\nexport default App;","D:\\Homework\\Y4S1\\Blockchain\\HW1\\Afeka\\blockchaingui\\src\\reportWebVitals.js",[],"D:\\Homework\\Y4S1\\Blockchain\\HW1\\Afeka\\blockchaingui\\src\\index.js",[],["31","32"],"D:\\Homework\\Y4S1\\Blockchain\\HW1\\Afeka\\blockchaingui\\src\\BlockChain.js",[],"D:\\Homework\\Y4S1\\Blockchain\\HW1\\Afeka\\blockchaingui\\src\\Components\\Client.js",["33"],{"ruleId":"34","severity":1,"message":"35","line":3,"column":17,"nodeType":"36","messageId":"37","endLine":3,"endColumn":26},{"ruleId":"34","severity":1,"message":"38","line":3,"column":28,"nodeType":"36","messageId":"37","endLine":3,"endColumn":36},{"ruleId":"34","severity":1,"message":"39","line":5,"column":24,"nodeType":"36","messageId":"37","endLine":5,"endColumn":28},{"ruleId":"34","severity":1,"message":"40","line":8,"column":7,"nodeType":"36","messageId":"37","endLine":8,"endColumn":9},{"ruleId":"34","severity":1,"message":"41","line":9,"column":5,"nodeType":"36","messageId":"37","endLine":9,"endColumn":9},{"ruleId":"42","severity":1,"message":"43","line":30,"column":5,"nodeType":"44","endLine":30,"endColumn":15},{"ruleId":"42","severity":1,"message":"43","line":31,"column":5,"nodeType":"44","endLine":31,"endColumn":26},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"34","severity":1,"message":"38","line":3,"column":17,"nodeType":"36","messageId":"37","endLine":3,"endColumn":25},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Form' is defined but never used.","'fs' is assigned a value but never used.","'text' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-global-assign","no-unsafe-negation"]